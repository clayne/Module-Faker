#!perl
use v5.36.0;
# PODNAME: module-blaster
# ABSTRACT: create a random distribution

use Data::Fake qw(Core Dates Names Text);
use Getopt::Long::Descriptive;
use List::Util qw(uniq);
use Module::Faker::Dist;

use lib 'nonsense';
use Meta qw(fake_cpan_author fake_license);
use Vocab qw(noun adj);

my @v_generators = (
  sub {
    # n.nnn
    my $ver_x = int rand 10;
    my $ver_y = int rand 1000;

    return sprintf '%d.%03d', $ver_x, $ver_y;
  },
  sub {
    # YYYYMMDD.nnn
    my $date = fake_past_datetime('%Y%m%d')->();
    return sprintf '%d.%03d', $date, int rand 1000;
  },
  sub {
    # x.y.z
    return join q{.}, map {; int rand 20 } (1..3);
  },
);

my $v = fake_pick(@v_generators)->();

my sub make_identifier ($str) {
  my @bits = split /[^A-Za-z0-9_]/, $str;
  join q{}, map {; ucfirst } @bits;
}

my @base = map { make_identifier( noun() ) } (1 .. fake_int(1,2)->());
my $distname = join q{-}, @base;
my $mainmod  = join q{::}, @base;

my $author  = fake_cpan_author()->();

my @adjs = uniq map {; make_identifier( adj() ) } (1 .. fake_int(0,5)->());

my sub package ($name) {
  state $config = {
    layout => {
      pkgword => fake_weighted(
        [ package => 4 ],
        [ class   => 1 ],
        [ role    => 1 ],
      )->(),
      style   => fake_pick(qw( statement block ))->(),
      version => fake_pick(qw( our our-literal inline ))->(),
    },
  };

  return $name => $config;
}

my $dist = Module::Faker::Dist->from_struct({
  name    => $distname,
  authors => [ $author->name_and_email ],
  version => $v,
  cpan_author => $author->pauseid,
  license   => [ fake_license()->() ],
  packages  => [
    package($mainmod),
    map {; package("$mainmod\::$_") } sort @adjs,
  ],
});

my $archive = $dist->make_archive({ dir => '.' });
say "Produced archive as $archive (cpan author: " . $author->pauseid . ")";
say "- $_" for sort map {; $_->name } $dist->packages;
